require("@nomicfoundation/hardhat-toolbox");

/** @type import('hardhat/config').HardhatUserConfig */
module.exports = {
  solidity: "0.8.27",
};



// SPDX-License-Identifier: MIT
pragma solidity ^0.8.27;

// Importing necessary interfaces
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol"; // Uniswap V2 Router
import "@sushiswap/core/contracts/interfaces/ISushiSwapRouter.sol"; // Sushiswap Router
import "@balancer-labs/v2-vault/contracts/interfaces/IVault.sol"; // Balancer Vault
import "@bancor/contracts/contracts/IBancorNetwork.sol"; // Bancor Network
import "@dodoex/dodo-exchange-3.0/contracts/IDodo.sol"; // Dodo Router
import "@pancakeswap/pancake-swap-lib/contracts/interfaces/IPancakeRouter02.sol"; // PancakeSwap Router

contract MultiDexSnipingBot {
    // Router addresses
    address public uniswapRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // Uniswap V2 Router
    address public sushiSwapRouter = 0xd9E1cE17F2641F24ae83637Ab66a2F1C37D08c04; // Sushiswap Router
    address public balancerRouter = 0xBA12222222228d8Ba445958a75a0704d566BF2C8; // Balancer Router
    address public bancorRouter = 0x6D33c8F94562e9FBf9b07bE1ae3CCE82f76a99d6; // Bancor Router
    address public dodoRouter = 0x8b3C1A4bbA14fF58B12e0e2BC8d6d5c5Ca95Bbf5; // Dodo Router
    address public pancakeSwapRouter = 0x05fF000EE9D3b899c8e05A1e9ceC84a8b46f0921; // PancakeSwap Router

    // Define contract variables
    address public owner;
    uint256 public slippage; // Slippage percentage in basis points (e.g., 100 = 1%)
    uint256 public stopLoss; // Stop-loss percentage in basis points

    // Event for trading actions
    event TradeExecuted(address indexed tokenIn, address indexed tokenOut, uint256 amountIn, uint256 amountOut, address indexed router);

    // Constructor
    constructor(uint256 _slippage, uint256 _stopLoss) {
        owner = msg.sender; // Set the contract deployer as the owner
        slippage = _slippage; // Set the slippage
        stopLoss = _stopLoss; // Set the stop-loss
    }

    // Function to execute trades
    function executeTrade(
        address tokenIn,
        address tokenOut,
        uint256 amountIn,
        address routerAddress
    ) external {
        require(msg.sender == owner, "Only owner can execute trades");
        require(amountIn > 0, "Amount must be greater than zero");

        // Transfer the input token to the contract
        IERC20(tokenIn).transferFrom(msg.sender, address(this), amountIn);

        // Approve the router to spend the token
        IERC20(tokenIn).approve(routerAddress, amountIn);

        // Calculate minimum amount out considering slippage
        uint256 amountOutMin = getAmountOutMin(tokenOut, amountIn);

        // Execute trade based on the router
        if (routerAddress == uniswapRouter) {
            IUniswapV2Router02(uniswapRouter).swapExactTokensForTokens(
                amountIn,
                amountOutMin,
                getPathForSwap(tokenIn, tokenOut),
                address(this),
                block.timestamp
            );
        } else if (routerAddress == sushiSwapRouter) {
            ISushiSwapRouter(sushiSwapRouter).swapExactTokensForTokens(
                amountIn,
                amountOutMin,
                getPathForSwap(tokenIn, tokenOut),
                address(this),
                block.timestamp
            );
        }
        // Add additional trading logic for other DEXes here

        // Emit event after trade execution
        emit TradeExecuted(tokenIn, tokenOut, amountIn, amountOutMin, routerAddress);
    }

    // Function to get the minimum amount out based on slippage
    function getAmountOutMin(address tokenOut, uint256 amountIn) internal view returns (uint256) {
        // Placeholder for expected amount out calculation
        uint256 expectedAmountOut = amountIn; // Replace this with actual calculation

        // Calculate slippage amount
        uint256 slippageAmount = (expectedAmountOut * slippage) / 10000; // Slippage in basis points
        return expectedAmountOut - slippageAmount;
    }

    // Function to get the path for token swap (for Uniswap and Sushiswap)
    function getPathForSwap(address tokenIn, address tokenOut) internal pure returns (address[] memory) {
        address;
        path[0] = tokenIn;
        path[1] = tokenOut;
        return path;
    }

    // Function to withdraw tokens from the contract
    function withdrawTokens(address token, uint256 amount) external {
        require(msg.sender == owner, "Only owner can withdraw");
        IERC20(token).transfer(msg.sender, amount);
    }



    
